//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.image` struct is generated, and contains static references to 8 images.
  struct image {
    /// Image `Fire`.
    static let fire = Rswift.ImageResource(bundle: R.hostingBundle, name: "Fire")
    /// Image `Fragment`.
    static let fragment = Rswift.ImageResource(bundle: R.hostingBundle, name: "Fragment")
    /// Image `Smoke`.
    static let smoke = Rswift.ImageResource(bundle: R.hostingBundle, name: "Smoke")
    /// Image `Sparkle`.
    static let sparkle = Rswift.ImageResource(bundle: R.hostingBundle, name: "Sparkle")
    /// Image `checkmark`.
    static let checkmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkmark")
    /// Image `dictionary_tab`.
    static let dictionary_tab = Rswift.ImageResource(bundle: R.hostingBundle, name: "dictionary_tab")
    /// Image `settings_tab`.
    static let settings_tab = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_tab")
    /// Image `traning_tab`.
    static let traning_tab = Rswift.ImageResource(bundle: R.hostingBundle, name: "traning_tab")
    
    /// `UIImage(named: "Fire", bundle: ..., traitCollection: ...)`
    static func fire(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fire, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Fragment", bundle: ..., traitCollection: ...)`
    static func fragment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fragment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Smoke", bundle: ..., traitCollection: ...)`
    static func smoke(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smoke, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Sparkle", bundle: ..., traitCollection: ...)`
    static func sparkle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sparkle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkmark", bundle: ..., traitCollection: ...)`
    static func checkmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkmark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dictionary_tab", bundle: ..., traitCollection: ...)`
    static func dictionary_tab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dictionary_tab, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_tab", bundle: ..., traitCollection: ...)`
    static func settings_tab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_tab, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "traning_tab", bundle: ..., traitCollection: ...)`
    static func traning_tab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.traning_tab, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `dictionaryCell`.
    static let dictionaryCell: Rswift.ReuseIdentifier<DictionaryCell> = Rswift.ReuseIdentifier(identifier: "dictionaryCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController
      
      let bundle = R.hostingBundle
      let editWordController = StoryboardViewControllerResource<EditWordController>(identifier: "EditWordController")
      let name = "Main"
      
      func editWordController(_: Void = ()) -> EditWordController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editWordController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "checkmark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkmark' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dictionary_tab", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dictionary_tab' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "settings_tab", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'settings_tab' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "traning_tab", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'traning_tab' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().editWordController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editWordController' could not be loaded from storyboard 'Main' as 'EditWordController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
